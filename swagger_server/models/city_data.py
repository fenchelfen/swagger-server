# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CityData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, country: str=None, population: int=None, postal_code: str=None):  # noqa: E501
        """CityData - a model defined in Swagger

        :param name: The name of this CityData.  # noqa: E501
        :type name: str
        :param country: The country of this CityData.  # noqa: E501
        :type country: str
        :param population: The population of this CityData.  # noqa: E501
        :type population: int
        :param postal_code: The postal_code of this CityData.  # noqa: E501
        :type postal_code: str
        """
        self.swagger_types = {
            'name': str,
            'country': str,
            'population': int,
            'postal_code': str
        }

        self.attribute_map = {
            'name': 'name',
            'country': 'country',
            'population': 'population',
            'postal_code': 'postal_code'
        }

        self._name = name
        self._country = country
        self._population = population
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt) -> 'CityData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CityData of this CityData.  # noqa: E501
        :rtype: CityData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CityData.


        :return: The name of this CityData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CityData.


        :param name: The name of this CityData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def country(self) -> str:
        """Gets the country of this CityData.


        :return: The country of this CityData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this CityData.


        :param country: The country of this CityData.
        :type country: str
        """

        self._country = country

    @property
    def population(self) -> int:
        """Gets the population of this CityData.


        :return: The population of this CityData.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population: int):
        """Sets the population of this CityData.


        :param population: The population of this CityData.
        :type population: int
        """

        self._population = population

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this CityData.


        :return: The postal_code of this CityData.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this CityData.


        :param postal_code: The postal_code of this CityData.
        :type postal_code: str
        """

        self._postal_code = postal_code
